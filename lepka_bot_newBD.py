import telebot
from telebot import types
import sqlite3
from database import (init_db, add_order, get_user_by_chat_id, get_new_orders,
                      update_order_status)

API_TOKEN = 'API_TOKEN'
ADMIN_CHAT_ID = 'ADMIN_CHAT_ID'
bot = telebot.TeleBot(API_TOKEN)

user_data = {}


@bot.message_handler(commands=['start'])
def send_welcome(message):
    chat_id = message.chat.id
    user = get_user_by_chat_id(chat_id)
    if str(chat_id) == ADMIN_CHAT_ID:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        # notify_button = types.KeyboardButton("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        new_orders_button = types.KeyboardButton("–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã")
        markup.add(new_orders_button)
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    elif user:
        user_data[chat_id] = {
            'name': user[1],
            'phone': user[2],
            'comment': user[3],
            'photos': []
        }
        bot.send_message(chat_id, "üì∏ –¢–µ–ø–µ—Ä—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —Å–≤–æ–µ–≥–æ –∏–∑–¥–µ–ª–∏—è. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –ó–∞–≤–µ—Ä—à–∏—Ç—å.",
                         reply_markup=generate_finish_button())
        bot.register_next_step_handler(message, get_photos)
    else:
        user_data[chat_id] = {}
        bot.send_message(chat_id, "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        bot.register_next_step_handler(message, get_name)


def get_name(message):
    chat_id = message.chat.id
    user_data[chat_id]['name'] = message.text
    bot.send_message(chat_id, "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    bot.register_next_step_handler(message, get_phone)


def get_phone(message):
    chat_id = message.chat.id
    phone_number = message.text
    if not phone_number.isdigit() or len(phone_number) != 11:
        bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ 11 —Ü–∏—Ñ—Ä.")
        bot.register_next_step_handler(message, get_phone)
    else:
        user_data[chat_id]['phone'] = phone_number
        bot.send_message(chat_id, "üì∏ –¢–µ–ø–µ—Ä—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —Å–≤–æ–µ–≥–æ –∏–∑–¥–µ–ª–∏—è. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –ó–∞–≤–µ—Ä—à–∏—Ç—å.",
                         reply_markup=generate_finish_button())
        bot.register_next_step_handler(message, get_photos)


def get_photos(message):
    chat_id = message.chat.id
    if message.content_type == 'photo':
        if 'photos' not in user_data[chat_id]:
            user_data[chat_id]['photos'] = []
        user_data[chat_id]['photos'].append(message.photo[-1].file_id)
        bot.send_message(chat_id,
                         "‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω–æ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ó–∞–≤–µ—Ä—à–∏—Ç—å, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å.",
                         reply_markup=generate_finish_button())
        bot.register_next_step_handler(message, get_photos)
    elif message.text.lower() == "–∑–∞–≤–µ—Ä—à–∏—Ç—å":
        bot.send_message(chat_id, "‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–µ–º—É –∏–∑–¥–µ–ª–∏—é.")
        bot.register_next_step_handler(message, get_comment)
    else:
        bot.send_message(chat_id, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
        bot.register_next_step_handler(message, get_photos)


def generate_finish_button():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    finish_button = types.KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å")
    markup.add(finish_button)
    return markup


def get_comment(message):
    chat_id = message.chat.id
    comment = message.text.strip()
    if not comment:
        bot.send_message(chat_id,
                         "‚ùó –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–µ–º—É –∏–∑–¥–µ–ª–∏—é.")
        bot.register_next_step_handler(message, get_comment)
    else:
        user_data[chat_id]['comment'] = comment
        add_order(user_data[chat_id]['name'], user_data[chat_id]['phone'], user_data[chat_id]['comment'], chat_id)
        send_data_to_admin(chat_id)


def send_data_to_admin(chat_id):
    if chat_id in user_data:
        info_message = (f"üìù –ò–º—è: {user_data[chat_id]['name']}\n"
                        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data[chat_id]['phone']}\n"
                        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {user_data[chat_id]['comment']}\n"
                        f"üÜî Chat ID: {chat_id}")
        if 'photos' in user_data[chat_id]:
            media = [types.InputMediaPhoto(photo_id) for photo_id in user_data[chat_id]['photos']]
            if media:
                media[0].caption = info_message
                bot.send_media_group(ADMIN_CHAT_ID, media)
            else:
                bot.send_message(ADMIN_CHAT_ID, info_message)
        else:
            bot.send_message(ADMIN_CHAT_ID, info_message)
        bot.send_message(chat_id,
                         "–°–ø–∞—Å–∏–±–æ‚ù§Ô∏è –í–∞—à–µ –∏–∑–¥–µ–ª–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ! –ö–æ–≥–¥–∞ –∏–∑–¥–µ–ª–∏–µ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ, –≤–∞–º –ø—Ä–∏–¥–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç‚ú®")
        bot.send_message(chat_id, "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –¥–æ–º–æ–π –∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—á–Ω—ë—Ç—Å—è –∑–∞–Ω–æ–≤–æ üè†", reply_markup=generate_home_button())
        del user_data[chat_id]
    else:
        bot.send_message(chat_id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")


def generate_home_button():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    home_button = types.KeyboardButton("üè† –î–æ–º–æ–π")
    markup.add(home_button)
    return markup


# @bot.message_handler(func=lambda message: message.text.lower() == "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
# def notify_user(message):
#     chat_id = message.chat.id
#     if str(chat_id) == ADMIN_CHAT_ID:
#         bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏:")
#         bot.register_next_step_handler(message, process_notify_ids)
#     else:
#         markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#         notify_button = types.KeyboardButton("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
#         markup.add(notify_button)
#         bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


# def process_notify_ids(message):
#     try:
#         ids_text = message.text
#         user_ids = [user_id.strip() for user_id in ids_text.split(',')]
#         for user_id in user_ids:
#             user_id = int(user_id)
#             bot.send_message(user_id,
#                              "üì£–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ! –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –í–∞–º —É–¥–æ–±–Ω–æ –µ–≥–æ –∑–∞–±—Ä–∞—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ @my_namin.")
#             mark_as_notified(user_id)
#         bot.send_message(message.chat.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
#     except ValueError:
#         bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


@bot.message_handler(func=lambda message: message.text.lower() == "–Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã")
def show_new_orders(message):
    chat_id = message.chat.id
    if str(chat_id) == ADMIN_CHAT_ID:
        orders = get_new_orders()
        if orders:
            for order in orders:
                order_message = (f"üÜî Order ID: {order[0]}\n"
                                 f"üìù –ò–º—è: {order[1]}\n"
                                 f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order[2]}\n"
                                 f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order[3]}\n"
                                 f"üÜî Chat ID: {order[4]}")
                markup = types.InlineKeyboardMarkup()
                button = types.InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data=f"notify_{order[0]}")
                markup.add(button)
                bot.send_message(chat_id, order_message, reply_markup=markup)
        else:
            bot.send_message(chat_id, "–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
    else:
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


@bot.callback_query_handler(func=lambda call: call.data.startswith("notify_"))
def handle_notification(call):
    order_number = int(call.data.split("_")[1])
    conn = sqlite3.connect('orders.db')
    c = conn.cursor()
    c.execute('SELECT chat_id FROM orders WHERE order_number = ?', (order_number,))
    chat_id = c.fetchone()[0]
    conn.close()

    bot.send_message(chat_id,
                     "üì£–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ! –ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –í–∞–º —É–¥–æ–±–Ω–æ –µ–≥–æ –∑–∞–±—Ä–∞—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ @my_namin.")
    update_order_status(order_number, 'closed')  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–∫–∞–∑
    bot.answer_callback_query(call.id, text="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)


@bot.message_handler(func=lambda message: message.text.lower() == "üè† –¥–æ–º–æ–π")
def go_home(message):
    send_welcome(message)


if __name__ == '__main__':
    init_db()
    bot.polling(none_stop=True)
